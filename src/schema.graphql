type Query {
    login(username: String!, password: String!): LoginResponse
    getFilms(filter: GetFilmsFilterInput): GetFilmsOutput!
    getFilm(film_id: ID!): Film!
    getRentals(filter: GetRentalFilterInput): GetRentsOfCustomerOutput!
    getRental(rental_id: ID!): Rental!
    rentalStatsByCustomerId: RentalStats!
    getCategories: [Category!]!
    getUser: User!
}

type Mutation {
    rentFilm(data: RentFilmInput!): Rental!
}

scalar DateTime

input RentFilmInput {
    film_id: ID!
    store_id: ID!
    rental_date: DateTime!
}

type LoginResponse {
    token: String
    first_name: String
    last_name: String
}

type RentalStats {
    current_rentals: Int!
    total_amount: Float!
    most_frequent_category: String!
    total_rentals: Int!
}

# FILMS FILTERS

type Film {
    film_id: ID!
    title: String!
    description: String
    release_year: Int
    language_id: ID!
    language: Language
    rental_duration: Int!
    rental_rate: Float!
    length: Int
    replacement_cost: Float!
    rating: String!
    category: Category
    actors: [Actor!]!
    availableStores: [Store!]!
}

type Category {
    category_id: ID!
    name: String!
    last_update: String!
}

type Language {
    language_id: ID!
    name: String!
    last_update: String!
}

type Actor {
    actor_id: ID!
    first_name: String!
    last_name: String!
    last_update: String!
}

type Store {
    store_id: ID!
    manager_staff_id: ID!
    address_id: ID!
    address: Address!
    last_update: String!
}

type Address {
    address_id: ID!
    address: String!
    address2: String
    district: String!
    city_id: ID!
    city: City!
    postal_code: String
    phone: String!
    last_update: String!
}

type City {
    city_id: ID!
    city: String!
    country_id: ID!
    country: Country!
    last_update: String!
}

type Country {
    country_id: ID!
    country: String!
    last_update: String!
}

type Rental {
    rental_id: ID!
    rental_date: String!
    inventory_id: ID!
    inventory: Inventory!
    return_date: String
    rental_period: Int
    payment: Payment
}

type Payment {
    amount: Float!
    payment_date: String!
}

type Inventory {
    inventory_id: ID!
    film_id: ID!
    film: Film!
    store_id: ID!
    store: Store!
    last_update: String!
}

input GetFilmsFilterInput {
    title: String
    categories: [Int!]
    page: Int
    filmPerPage: Int
    orderBy: String
    sort: Sort
}

type GetFilmsOutput {
    films: [Film!]!
    total: Int!
}

input GetRentalFilterInput {
    page: Int
    itemsPerPage: Int
    orderBy: String
    sort: Sort
}

type GetRentsOfCustomerOutput {
    rentals: [Rental!]!
    total: Int!
}

type User {
    first_name: String!
    last_name: String!
    email: String!
    rental_stats: RentalStatistics!
}

type RentalStatistics {
    current_rentals: Int
    total_rentals: Int
    total_amount: Float
    most_frequent_category: Category
}

enum Sort {
  asc
  desc
}