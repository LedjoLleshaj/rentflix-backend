type Query {
    login(username: String!, password: String!): LoginResponse
    getFilms(filter: GetFilmsFilterInput): GetFilmsOutput!
    getRentsOfCustomer(filter: GetRentsOfCustomerFilterInput): GetRentsOfCustomerOutput!
    historyOfRentalsByCustomerId: [Rental_History!]!
    rentalStatsByCustomerId: RentalStats!
    getFilmDetails(title: String!): FilmDetails!
    getCategories: [String!]!
}

type LoginResponse {
    token: String
    first_name: String
    last_name: String
}

type Address {
    street: String
    city: String
    region: String
    country: String
}

type FilmDetails {
    film_id: Int
    title: String
    release_year: Int
    language: String
    length: Int
    rating: String!
    description: String
    actors: String
    category: String
    rental_duration: Int
    rental_rate: Float
    disponibility: [Address]
}

type Rental_History {
    title: String
    rental_date: String
    return_date: String
    address: String
    amount: Float
}

type RentalStats {
    current_rentals: Int!
    total_amount: Float!
    most_frequent_category: String!
    total_rentals: Int!
}

# FILMS FILTERS

type Film {
    film_id: Int!
    title: String!
    description: String
    release_year: Int
    language: String
    rental_duration: Int!
    rental_rate: Float!
    length: Int
    replacement_cost: Float!
    rating: String!
    category_id: Int!
    category: String!
}

type Rent {
    title: String!
    rental_date: String!
    return_date: String
    address: String!
    amount: Float!
}

input GetFilmsFilterInput {
    title: String
    categories: [Int!]
    page: Int
    filmPerPage: Int
    orderBy: String
    sort: Sort
}

type GetFilmsOutput {
    films: [Film!]!
    total: Int!
}

input GetRentsOfCustomerFilterInput {
    page: Int
    filmPerPage: Int
    orderBy: String
    sort: Sort
}

type GetRentsOfCustomerOutput {
    rents: [Rent!]!
    total: Int!
}

enum Sort {
  asc
  desc
}